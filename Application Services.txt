
SNS : Simple Notifications Service : 
--> We can create a Topic, We can add subscribers (email, website endpoint, sqs, mobile). 
--> Subscriber need to confirm the subscription. 
--> Push based messaging service. 

SNS also supports Push notifications service. Works based on mobile operating systems. 
__

SQS : Simple Queue service : pull based messeging service. 
Ex: AutoScaling group works with sqs service. 

--> Standard 
At-least-once delivery, message ordering isn't preserved
At-least once delivery
Best-effort ordering

--> FIFO (Name should end with .fifo) 
First-in-first-out delivery, message ordering is preserved
First-in-first-out delivery
Exactly-once processin

Maximum message size : 256 kb  (AWS cost us based on chunks)
1 chunk = 64 kb..   

1 million req under free tier eligibility.

__________

SES : Simple Email Service : If we want to send messeges on behalf of another email / domain name, We can use SES service. 

--> For bulk email sending, we need to use another service "Amazon pinpoint".
https://www.youtube.com/watch?v=g_NTrw3UU0w

_________________________________________________________

D: 07/04/2023

AWS Lambda : Serverless architecture. 
--> Lambda performance depends on memory configurations. 

--> Python
--> .net core
--> java
--> go
--> ruby
--> Node.js

Lambda-canary : It open the required website and look for the string we have given.

google.com --> Google

--> Incresing the memory and timeout values.
--> Changing the required permissions on lambda associated roles. 
--> Can we run lambda within a VPC..?? YES
	--> FOr Lambda role Make sure you associate "AWSLambdaVPCAccessExecutionRole"


task : Am sharing some lambda functions... Deploy the lambda functions and test it. 

_____________________________________________________________________________________



AWS Cloudformation : IaC Infrastructure as Code : JSON/YAML : 
--> it's free. 

Prepare a cloudformation stack. This stack are reusable.
--> CLoudformation created resources will delete automatically when we delete the cloudformation stack.

rollback on failure : yes

2 ec2 instance, 3 s3 bucket, 1 rds instance

AWS Console Recorder : Browser plugin
Former2 : former2.com

https://aws.amazon.com/blogs/machine-learning/plant-leaf-disease-detection-with-amazon-rekognition-custom-labels/


___________________________________________________________________________________


How many Account you manage : 
For Every CLient : Dev, SQA, UAT and PRD


AWS Organisations along with SSO: 

Management account : From single aws account, we can manage multiple accounts. Centralized billing option for multiple aws accounts. 

identity source : SSO / Active Directory
Permission Sets : set of permissions in aws.
you can see/find only org joined aws accounts in SSO.


_____________________________________________________________________________________

D: 12/04/2023

Codecommit
CodeDeploy
Codepipeline
codebuild

"S3/codecommit/git" --> Deploy to "ElasticBeanstalk"

________________

Create an IAM user, Make sure he has "Adminaccess / Codecommit full access", Generate "programatic keys (Accesskeyid&secretaccesskey)" and configure it in your local laptop.

aws configure
accesskey : 
secretaccesskey : 
region : ap-south-1
output :  

You need to have some softwares. 
1. Install Python
2. Install git
3. install grc : pip install git-remote-codecommit


git add .
git status
git commit -m "commit msg"
git push
git pull
git clone

Task : With shared code, perform CICD deployment.

GIT : 
https://www.youtube.com/watch?v=rtI26X6FJX0&list=PLneBjIzDLECkdgoinrTO7D519zgPEmcte

Linux : 
https://www.udemy.com/course/linuxwithavinash/?couponCode=APR2023

Jenkins : 
https://www.udemy.com/course/jenkinswithavinash/?couponCode=APR2023
_________________________________________________________________________________________

ECR : Elastic Containers Repository : Place to store container images.
ECS : Elastic Container Service : 

ECR Commands : 
1. Connect to the repo
2. build "docker build -t imagename ."
3. Tagging "docker tag imagename:latest"
4. Push it "docker push URI/imagename:latest"


Fargate : Fully managed by AWS. No backend instance, AWS manages everything.
EC2 : we will get an instance, COnstainers runs within instance, We can login and perform os level operations.

Task Defination : Task definitions specify the container information for your application, such as how many containers are part of your task, what resources they will use, how they are linked together, and which host ports they will use.

1. awsvpc — The task is allocated its own elastic network interface (ENI) and a primary private IPv4 address. This gives the task the same networking properties as Amazon EC2 instances.

2. bridge — The task utilizes Docker's built-in virtual network which runs inside each Amazon EC2 instance hosting the task.

3. host — The task bypasses Docker's built-in virtual network and maps container ports directly to the ENI of the Amazon EC2 instance hosting the task. As a result, you can't run multiple instantiations of the same task on a single Amazon EC2 instance when port mappings are used.

4. none — The task has no external network connectivity.

** https://ecsworkshop.com/
https://eksworkshop.com/
https://www.youtube.com/containersfromthecouch
https://kodekloud.com/courses/docker-for-the-absolute-beginner/
https://www.youtube.com/watch?v=fqMOX6JJhGo
Terraform : https://www.youtube.com/watch?v=iRaai1IBlB0
chef : https://learn.chef.io/courses/course-v1:chef+Chef101+Perpetual/about


______________________________________________________________________________________
 

Cloud9 : IDE with in AWS environment. 

AWS CDK : Cloud Development kit : Typescript, Python, .net, Java

https://nodejs.org/en/download/

Step 1 : install node.js 	npm --version
Step 2 : Install AWS CDK	npm install -g aws-cdk
	  To Verify CDK verion	cdk --version

cdk init		--> Initialise the project

 * `npm run watch`   watch for changes and compile
 * `npm run test`    perform the jest unit tests
 * `cdk deploy`      deploy this stack to your default AWS account/region
 * `cdk diff`        compare deployed stack with current state
 * `cdk synth`       emits the synthesized CloudFormation template


mkdir test-project
cd test-project
cdk init sample-app --language typescript
cdk synth		--> Synthasise, Create a cloudformation script
cdk bootstrap		--> Only onetime
cdk diff		--> What modifications happens
lib/test-project-stack.ts	--> Our code is here
cdk deploy	--> To deploy

https://cdkworkshop.com/
https://aws.amazon.com/tools/
https://aws.amazon.com/sdk-for-python/
https://github.com/aws/aws-sdk-js-v3#getting-started

_____________________________________________________________________________________



AD : https://www.youtube.com/watch?v=RDlBoAHVmZs
Ad Connector : https://www.youtube.com/watch?v=Ca259gg6SoM
Linux to AD : https://www.youtube.com/watch?v=LWi9-XL2vWQ

Switch role : https://www.youtube.com/watch?v=sZiiB4yF0VY

https://aws.amazon.com/certification/
Gateway : https://www.youtube.com/watch?v=wmcBSHpoHhs
CW Custom Metrics : https://www.youtube.com/watch?v=Fe2mEkWiNSA
Gloabl Accelerator : https://www.youtube.com/watch?v=ELEW3R5vgCA


GIT : https://www.youtube.com/watch?v=rtI26X6FJX0&list=PLneBjIzDLECkdgoinrTO7D519zgPEmcte

________________________________________

SMS : Server Migration Service : 
--> CloudEndure

https://console.cloudendure.com/

What Server we want to migrate to aws, Install CLoudendure Agent --> Cloudendure screen create a task and test the connection --> Launch migration instance in AWS environment --> Run the migration task.. We will get an AMI --> Launch instance from AMI. 

Database migration : https://www.youtube.com/watch?v=iRhJDGp-ew8
SMS with VMWARE : https://www.youtube.com/watch?v=Vx9lRRY-shg
Cloudendure migration : https://www.youtube.com/watch?v=8xf1RpPdcHs
azure to aws migration : https://www.youtube.com/watch?v=bdaHMRqCBkg

_______________________________

Task : Create AWS Organisation and enable SSO, Create Multiple users and test SSO login option with multiple Permission Sets.

Task 2 : Create a repository, Get familier with clone, push, add, commit. 

Task 3 : Launch an ec2 instance in Mumbai region.. Migrate this ec2 instance from mumbai region to N Virginia region using "CloudEndure Migration".
Cloudendure migration : https://www.youtube.com/watch?v=8xf1RpPdcHs




https://www.udemy.com/course/linuxwithavinash/?couponCode=FEB2023

https://www.udemy.com/course/jenkinswithavinash/?couponCode=FEB2023

https://www.youtube.com/watch?v=rtI26X6FJX0&list=PLneBjIzDLECkdgoinrTO7D519zgPEmcte






